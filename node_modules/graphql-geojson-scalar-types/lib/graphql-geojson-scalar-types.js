'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var graphql = require('graphql');

function parseLiteral(ast) {
  switch (ast.kind) {
    case graphql.Kind.STRING:
    case graphql.Kind.BOOLEAN:
      return ast.value;

    case graphql.Kind.INT:
    case graphql.Kind.FLOAT:
      return parseFloat(ast.value);

    case graphql.Kind.OBJECT:
      {
        var value = Object.create(null);
        ast.fields.forEach(function (field) {
          value[field.name.value] = parseLiteral(field.value);
        });
        return value;
      }

    case graphql.Kind.LIST:
      return ast.values.map(parseLiteral);

    default:
      return null;
  }
}

var GJV = require('geojson-validation');

var validate = function validate(value) {
  if (!GJV.isBbox(value)) {
    throw new graphql.GraphQLError("Expected GeoJSON Bbox but got: " + JSON.stringify(value));
  }

  return value;
};

var Bbox = new graphql.GraphQLScalarType({
  name: 'GeoJSONBboxScalar',
  serialize: validate,
  parseValue: validate,
  parseLiteral: function parseLiteral$1(ast) {
    return validate(parseLiteral(ast));
  }
});

var GJV$1 = require('geojson-validation');

var validate$1 = function validate(value) {
  if (!GJV$1.isFeature(value)) {
    throw new graphql.GraphQLError("Expected GeoJSON Feature but got: " + JSON.stringify(value));
  }

  return value;
};

var Feature = new graphql.GraphQLScalarType({
  name: 'GeoJSONFeatureScalar',
  serialize: validate$1,
  parseValue: validate$1,
  parseLiteral: function parseLiteral$1(ast) {
    return validate$1(parseLiteral(ast));
  }
});

var GJV$2 = require('geojson-validation');

var validate$2 = function validate(value) {
  if (!GJV$2.isFeatureCollection(value)) {
    throw new graphql.GraphQLError("Expected GeoJSON FeatureCollection but got: " + JSON.stringify(value));
  }

  return value;
};

var FeatureCollection = new graphql.GraphQLScalarType({
  name: 'GeoJSONFeatureCollectionScalar',
  serialize: validate$2,
  parseValue: validate$2,
  parseLiteral: function parseLiteral$1(ast) {
    return validate$2(parseLiteral(ast));
  }
});

var GJV$3 = require('geojson-validation');

var validate$3 = function validate(value) {
  if (!GJV$3.isGeometryObject(value)) {
    throw new graphql.GraphQLError("Expected GeoJSON Geometry but got: " + JSON.stringify(value));
  }

  return value;
};

var Geometry = new graphql.GraphQLScalarType({
  name: 'GeoJSONGeometryScalar',
  serialize: validate$3,
  parseValue: validate$3,
  parseLiteral: function parseLiteral$1(ast) {
    return validate$3(parseLiteral(ast));
  }
});

var GJV$4 = require('geojson-validation');

var validate$4 = function validate(value) {
  if (!GJV$4.isGeometryCollection(value)) {
    throw new graphql.GraphQLError("Expected GeoJSON GeometryCollection but got: " + JSON.stringify(value));
  }

  return value;
};

var GeometryCollection = new graphql.GraphQLScalarType({
  name: 'GeoJSONGeometryCollectionScalar',
  serialize: validate$4,
  parseValue: validate$4,
  parseLiteral: function parseLiteral$1(ast) {
    return validate$4(parseLiteral(ast));
  }
});

var GJV$5 = require('geojson-validation');

var validate$5 = function validate(value) {
  if (!GJV$5.isLineString(value)) {
    throw new graphql.GraphQLError("Expected GeoJSON LineString but got: " + JSON.stringify(value));
  }

  return value;
};

var LineString = new graphql.GraphQLScalarType({
  name: 'GeoJSONLineStringScalar',
  serialize: validate$5,
  parseValue: validate$5,
  parseLiteral: function parseLiteral$1(ast) {
    return validate$5(parseLiteral(ast));
  }
});

var GJV$6 = require('geojson-validation');

var validate$6 = function validate(value) {
  if (!GJV$6.isMultiLineString(value)) {
    throw new graphql.GraphQLError("Expected GeoJSON MultiLineString but got: " + JSON.stringify(value));
  }

  return value;
};

var MultiLineString = new graphql.GraphQLScalarType({
  name: 'GeoJSONMultiLineStringScalar',
  serialize: validate$6,
  parseValue: validate$6,
  parseLiteral: function parseLiteral$1(ast) {
    return validate$6(parseLiteral(ast));
  }
});

var GJV$7 = require('geojson-validation');

var validate$7 = function validate(value) {
  if (!GJV$7.isMultiPoint(value)) {
    throw new graphql.GraphQLError("Expected GeoJSON MultiPoint but got: " + JSON.stringify(value));
  }

  return value;
};

var MultiPoint = new graphql.GraphQLScalarType({
  name: 'GeoJSONMultiPointScalar',
  serialize: validate$7,
  parseValue: validate$7,
  parseLiteral: function parseLiteral$1(ast) {
    return validate$7(parseLiteral(ast));
  }
});

var GJV$8 = require('geojson-validation');

var validate$8 = function validate(value) {
  if (!GJV$8.isMultiPolygon(value)) {
    throw new graphql.GraphQLError("Expected GeoJSON MultiPolygon but got: " + JSON.stringify(value));
  }

  return value;
};

var MultiPolygon = new graphql.GraphQLScalarType({
  name: 'GeoJSONMultiPolygonScalar',
  serialize: validate$8,
  parseValue: validate$8,
  parseLiteral: function parseLiteral$1(ast) {
    return validate$8(parseLiteral(ast));
  }
});

var GJV$9 = require('geojson-validation');

var validate$9 = function validate(value) {
  if (!GJV$9.isPoint(value)) {
    throw new graphql.GraphQLError("Expected GeoJSON Point but got: " + JSON.stringify(value));
  }

  return value;
};

var Point = new graphql.GraphQLScalarType({
  name: 'GeoJSONPointScalar',
  serialize: validate$9,
  parseValue: validate$9,
  parseLiteral: function parseLiteral$1(ast) {
    return validate$9(parseLiteral(ast));
  }
});

var GJV$a = require('geojson-validation');

var validate$a = function validate(value) {
  if (!GJV$a.isPolygon(value)) {
    throw new graphql.GraphQLError("Expected GeoJSON Polygon but got: " + JSON.stringify(value));
  }

  return value;
};

var Polygon = new graphql.GraphQLScalarType({
  name: 'GeoJSONPolygonScalar',
  serialize: validate$a,
  parseValue: validate$a,
  parseLiteral: function parseLiteral$1(ast) {
    return validate$a(parseLiteral(ast));
  }
});

var GJV$b = require('geojson-validation');

var validate$b = function validate(value) {
  if (!GJV$b.isPosition(value)) {
    throw new graphql.GraphQLError("Expected GeoJSON Position but got: " + JSON.stringify(value));
  }

  return value;
};

var Position = new graphql.GraphQLScalarType({
  name: 'GeoJSONPositionScalar',
  serialize: validate$b,
  parseValue: validate$b,
  parseLiteral: function parseLiteral$1(ast) {
    return validate$b(parseLiteral(ast));
  }
});

exports.Bbox = Bbox;
exports.Feature = Feature;
exports.FeatureCollection = FeatureCollection;
exports.Geometry = Geometry;
exports.GeometryCollection = GeometryCollection;
exports.LineString = LineString;
exports.MultiLineString = MultiLineString;
exports.MultiPoint = MultiPoint;
exports.MultiPolygon = MultiPolygon;
exports.Point = Point;
exports.Polygon = Polygon;
exports.Position = Position;
